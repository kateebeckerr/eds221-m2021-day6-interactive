---
title: "key_week3_Day1_inter"
format: html
editor: visual
---

## Read in the data

```{r}
# Read in World Bank development indicator data and metadata
wb_indicators <- readr::read_csv(here("data", "wb_indicators.csv"), na = c("..", ""))
wb_metadata <- readr::read_csv(here("data", "wb_indicators_metadata.csv"))
```

### Always look at it:

```{r}
View(wb_indicators)
View(wb_metadata)
```

## Some basic tidying: wide-to-long so each variable is in a single column

First thing's first: is the data in `wb_indicators` tidy? Why not?

The biggest thing that stands out: the single variable of *year* is spread out over many columns. This means the data is in *wide* format. To make it tidy, we're going to need to convert it to long format.

```{r}
wb_indicators_long <- wb_indicators %>% 
  tidyr::pivot_longer(cols = '2001 [YR2001]':'2020 [YR2020]', # Which columns to squish
               names_to = "year", # The original column names are squished into this column
               values_to = "indicator_value") # The values are correctly aligned in this column

# Check it out (always):
# View(wb_indicators_long) # Why do I comment this out or run it in the Console? 

head(wb_indicators_long)

```

## Clean up that year column

We'll use `tidyr::separate()` to separate the `year` column.

```{r}
wb_data_clean <- wb_indicators_long %>% 
  tidyr::separate(col = year, into = c("year", "year_chr"), sep = " ") %>% 
  dplyr::select(-year_chr, -'Country Code', -'Series Code') # This drops a few redundant columns (caution here...best to leave things if you're not sure)

head(wb_data_clean)
```

## Long-to-wide: indicator variables

Our data *still* aren't quite tidy! Why?

Notice that we have multiple variables that were measured (our different indicators) all in a single column. This is a scenario where there are multiple variables in a single column. To be **Tidy**, we want each variable to live in just *one* column.

That means we're going to need to widen this data. We'll do that using `tidyr::pivot_wider()`.

```{r}
wb_data_tidy <- wb_data_clean %>% 
  tidyr::drop_na('Series Name') %>% 
  tidyr::pivot_wider(names_from = 'Series Name', values_from = indicator_value) # Pivot to wide format

head(wb_data_tidy)
```

## Those column names are a nightmare

We can reassign all names as follows (in this order):

```{r}
names(wb_data_tidy) <- c("country", "year", "access_clean_fuels_pp", "access_electricity_pp", "co2_emissions_kt", "fossil_fuel_cons_pt", "water_stress")

head(wb_data_tidy)
```

Or, we'll learn how to use `dplyr::rename()` soon...

# Part 2: More data wrangling with `dplyr`

## `dplyr::filter()`

Use `dplyr::filter()` to keep or exclude rows based on your conditions.

**Some examples:**

I only want to keep observations from the dataset above for "United States":

```{r}
us_wb <- wb_data_tidy %>% 
  filter(country == "United States")

head(us_wb)
```

I want to keep observations if the country is "United States" OR "Mexico" OR "Brazil":

```{r}
us_mx_bz <- wb_data_tidy %>% 
  filter(country %in% c("United States", "Mexico", "Brazil"))

unique(us_mx_bz$country)
```

I want to keep observations if the country is "Guatemala" OR the year is 2020:

```{r}
guatemala_or_2020 <- wb_data_tidy %>% 
  filter(country == "Guatemala" | year == 2020)
```

I want to keep observations in the year is 2010 and CO2 emissions is greater than 10,000kt:

```{r}
co2_2010_over10k <- wb_data_tidy %>% 
  filter(year == 2010, co2_emissions_kt > 10000)
```

## `dplyr::select()`

Select (or exclude) columns using `dplyr::select()`. Put a minus sign (-) in front of a column name or position to exclude it.

```{r}
nicaragua_co2 <- wb_data_tidy %>% 
  filter(country == "Nicaragua") %>% 
  select(year, co2_emissions_kt)
```

Exclude the water_stress and access_electricity_pp columns:

```{r}
wb_subset <- wb_data_tidy %>% 
  select(-c(water_stress, access_electricity_pp))
```

## `dplyr::rename()`

Use `dplyr::rename()` to rename one or more columns, in the order `new_name = old_name`.

```{r}
wb_newnames <- wb_data_tidy %>% 
  rename(elec = access_electricity_pp, co2 = co2_emissions_kt)
```

## `dplyr::mutate()`

Use `dplyr::mutate()` to add a new column, or transform an existing one.

Example: to change the class of a variable (careful - this overwrites the existing column!)

```{r}
# Check the class of year:
class(wb_data_tidy$year) # Character! Let's change it. 

wb_data_tidy <- wb_data_tidy %>% 
  mutate(year = as.numeric(year))

# Check again: 
class(wb_data_tidy$year)
```

Example: Add a new column that has co2 in TONS (instead of kilotons):

```{r}
wb_co2_tons <- wb_data_tidy %>% 
  mutate(co2_tons = co2_emissions_kt * 1000)

head(wb_co2_tons)
```

## `dplyr::group_by() %>% summarize()`

To perform one or more functions on data by *group*, returning a nice summary table, use `group_by` + `summarize()`.

Example: find the total reported co2 emissions (kt) for 2001 - 2020 from each country:

```{r}
co2_total <- wb_data_tidy %>% 
  group_by(country) %>% 
  summarize(total_co2_kt = sum(co2_emissions_kt, na.rm = TRUE))
```

Example: find the total co2 emissions (kt) across all country for *each year* from 2001 - 2020:

```{r}
co2_annual <- wb_data_tidy %>% 
  group_by(year) %>% 
  summarize(annual_total_co2_kt = sum(co2_emissions_kt, na.rm = TRUE))

# Let's plot this for fun: 
ggplot(data = co2_annual, aes(x = year, y = annual_total_co2_kt)) +
  geom_line()

# Always look. What is happening here? Always always always look at your data. 
```

# Part 3: Putting things together

We've learned a bunch of different useful functions for data wrangling in the {tidyverse}. But this may still feel a bit tedious.

Often, for readability and efficiency, we may want to string together different steps into a sequence. We can do that using the pipe operator (`%>%` in the tidyverse, or `|>` is the sparkly new native pipe in R).

Let's take our raw data that we initially read in:

```{r}
head(wb_indicators)
```

Let's tidy this up in a single sequence, with the pipe operator between.

REMEMBER: Look at what you've done after **every step in a sequence.**

```{r}
wb_tidy <- wb_indicators %>% 
  tidyr::pivot_longer(cols = `2001 [YR2001]`:`2020 [YR2020]`,
               names_to = "year",
               values_to = "indicator_value") %>% 
  tidyr::separate(col = year, into = c("year", "year_chr"), sep = " ") %>% 
  dplyr::select(-'Country Code', -'Series Code', -year_chr) %>% 
  tidyr::drop_na('Series Name') %>% 
  tidyr::pivot_wider(names_from = 'Series Name', values_from = 'indicator_value') %>% 
  dplyr::rename(country = 'Country Name', 
                year = 'year', 
                clean_fuels = 'Access to clean fuels and technologies for cooking (% of population)',
                access_elec = 'Access to electricity (% of population)',
                co2 = 'CO2 emissions (kt)',
                fossil_fuels = 'Fossil fuel energy consumption (% of total)',
                water_stress = 'Level of water stress: freshwater withdrawal as a proportion of available freshwater resources') %>% 
  dplyr::mutate(year = as.numeric(year))
  

# Recall you can get the names of columns easily using names(df)
```

**Some questions:** How long should a piped sequence be before I store the output and start a new piped sequence? Can a piped sequence be too long? Can I always pipe into everything?

## End Day 6 Interactive Session
